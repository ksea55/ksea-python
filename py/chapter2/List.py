# 序列(List)是Python中最基本的数据结构,可以理解成java中的数组，向它一样分配，取值
# Python有6个序列的内置类型，但最常见的是列表和元组。
# 序列都可以进行的操作包括索引，切片，加，乘，检查成员。
# 此外，Python已经内置确定序列的长度以及确定最大和最小的元素的方法。
# 列表是最常用的Python数据类型，它可以作为一个方括号内的逗号分隔值出现。
# 列表的数据项不需要具有相同的类型
# 创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可。如下所示：

print("---------------------------------------------------------------------------------------------------------------")

list1 = ['Google', 'Baidu', 1997, 2000, 12.22, True];
list2 = [1, 2, 3, 4, 5];

print("list1[0]: ", list1[0])  # list1[0]:  Google
# print("list1[11]: ",list1[11]) # 当根据索引获取列表的值，其超出列表长度会抛出异常：IndexError: list index out of range
print("list2[1:5]: ", list2[1:7])  # list2[1:5]:  [2, 3, 4, 5] 有意思的是在python中 截取的长度超过其本身长度而不会报错

# 更改list数据
print("更新前list1[0]:", list1[0])  # 更新前list1[0]: Google
list1[0] = "Taobao"
print("更新后list1[0]:", list1[0])  # 更新后list1[0]: Taobao

# 删除list列表中的元素的引用

del list1[0]
print("使用del删除之后的list1的结果:", list1)  # 使用del删除之后的list1的结果: ['Baidu', 1997, 2000, 12.22, True]

print("---------------------------------------------------------------------------------------------------------------")

# Python列表脚本操作符

L1 = [1, 2, 3]
L2 = [4, 5]
S1 = L1 + L2  # [1, 2, 3, 4, 5] 列表用+号连接,会将两个列表中的元素合并成一个列表并返回
print(S1)

S2 = L2 * 3
print(S2)  # [4, 5, 4, 5, 4, 5]  * 表示重复该列表中的元素，3表示重复该列表中的元素多少次，然后将这些元素重新组合成一个新的列表并返回

S3 = 2 in L1
print(S3)  # True in 表示 in前面的元素是否存在in后面的列表中，如果该元素存在则返回True 否则就返回False

for x in L1:
    print(x, end="")  # 迭代列表，并不换行 用空格符号进行连接

# 列表中的元素截取与字符串中的截取方法一样

# 列表中的列表嵌套列表操作

S4 = [L1, L2]
print(S4)  # 打印结果：[[1, 2, 3], [4, 5]]

S5 = S4[0]
print(S5)  # 打印结果:[1, 2, 3]

S6 = S5[1]
print(S6)  # 打印结果:2

S7 = S4[0][1]
print(S7)  # 打印结果:2 这个就相当于java中的二维数组一样

print("---------------------------------------------------------------------------------------------------------------")

# Python列表中的函数&方法

# len(list)获取列表元素个数的长度 相当于java中的size()
L3 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(len(L3))  # 打印结果:9
print(L3.__len__())  # 打印结果：9

# max(list) 返回列表元素最大值
print(max(L3))  # 打印结果：9

# min(list) 返回列表元素最小值
print(min(L3))  # 打印结果：1

# list(seq) 将元组转换为列表
y1 = (12344, "Tuple", 23.22, True, "python")  # 注意元祖 在创建的时候如果元组只有一个元素后面需要添加,如：y1=(1221,)不添加会报错
L4 = list(y1)
print(L4)  # [12344, 'Tuple', 23.22, True, 'python']

print("---------------------------------------------------------------------------------------------------------------")

#	list.append(obj) 在列表末尾添加新的对象

L5 = ["A", 12, 14.11, True]
L5.append("Python")
print(L5)  # 打印结果:['A', 12, 14.11, True, 'Python']

#	list.extend(seq) 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）

L6 = ["ABC", "DFC"]
L7 = [12, 44.11, False]
L6.extend(L7)
print(L6)  # 打印结果:['ABC', 'DFC', 12, 44.11, False]

#	list.count(obj) 统计某个元素在列表中出现的次数

L8 = ["A", "BC", "ABC", "A", "ADF"]
print(L8.count("A"))  # 打印结果:2

#	list.index(obj) 从列表中找出某个值第一个匹配项的索引位置

print(L8.index("A"))  # 打印结果：0
# print(L8.index("B"))  # 当查找的值不在列表中会抛出异常--> ValueError: 'B' is not in list


#	list.insert(index, obj) 将对象插入列表

L9 = ["ABC", "DFG"]
L9.insert(1, "python")
print(L9)  # ['ABC', 'python', 'DFG'] #将对象插到指定位置，如果该位置元素已经存在，将会向后移位
L9.insert(6, "Hello python")
print(L9)  # ['ABC', 'python', 'DFG', 'Hello python'] #当插入的元素 所在的索引超过列表长度 默认会将该元素插入到元素最后

#	list.pop(obj=list[-1]) 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值

L10 = ["A", "B", "C", "D", "E", "F"]
V1 = L10.pop()
print(V1, "--", L10)  # 打印结果:F -- ['A', 'B', 'C', 'D', 'E']  pop()方法跟java的linkedList的方法一样

V2 = L10.pop(2)  # 移除指定位置的元素
print(V2, "--", L10)  # 打印结果:C -- ['A', 'B', 'D', 'E']

#	list.remove(obj) 移除列表中某个值的第一个匹配项

L11 = ["A", "B", "A", "D", "A", "F"]
L11.remove("A")  # 这里将把首先匹配到的元素进行删除，然后就返回列表，而不会继续往后移除，可以这样理解，遍历某个集合，当找到这个匹配的元素删除，立马break;
print(L11)

#	list.reverse() 反向列表中元素

L12 = ["A", "B", "C", "D", "E", "F"]
L12.reverse()
print(L12)  # ['F', 'E', 'D', 'C', 'B', 'A']

#	list.sort([func]) 对原列表进行排序

L13 = [3, 1, 6, 2, 8, 1]
L13.sort()
print(L13)  # [1, 1, 2, 3, 6, 8]
L13.sort()

#	list.clear() 清空列表

L13.clear()
print(L13)  # 打印结果:[]
print(len(L13))  # 打印结果：0

#	list.copy() 复制列表

L14 = ["A", "B", "C"]
L15 = L14.copy()
print(L15)  # ['A', 'B', 'C']

print("---------------------------------------------------------------------------------------------------------------")
